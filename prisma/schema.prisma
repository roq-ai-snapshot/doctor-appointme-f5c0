generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model appointment {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date            DateTime      @db.Date
  start_time      DateTime      @db.Time(6)
  end_time        DateTime      @db.Time(6)
  status          String        @db.VarChar(255)
  patient_id      String        @db.Uuid
  doctor_id       String        @db.Uuid
  organization_id String        @db.Uuid
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  medical_staff   medical_staff @relation(fields: [doctor_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organization    organization  @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  guest           guest         @relation(fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model guest {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date_of_birth DateTime      @db.Date
  gender        String        @db.VarChar(255)
  phone_number  String        @db.VarChar(255)
  address       String        @db.VarChar(255)
  city          String        @db.VarChar(255)
  state         String        @db.VarChar(255)
  zip_code      String        @db.VarChar(255)
  country       String        @db.VarChar(255)
  user_id       String        @db.Uuid
  created_at    DateTime      @default(now()) @db.Timestamp(6)
  updated_at    DateTime      @default(now()) @db.Timestamp(6)
  appointment   appointment[]
  user          user          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model insurance_provider {
  id                  String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_name        String       @db.VarChar(255)
  policy_number       String       @db.VarChar(255)
  coverage_start_date DateTime     @db.Date
  coverage_end_date   DateTime     @db.Date
  user_id             String       @db.Uuid
  organization_id     String       @db.Uuid
  created_at          DateTime     @default(now()) @db.Timestamp(6)
  updated_at          DateTime     @default(now()) @db.Timestamp(6)
  organization        organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user                user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model medical_staff {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  specialty       String        @db.VarChar(255)
  license_number  String        @db.VarChar(255)
  user_id         String        @db.Uuid
  organization_id String        @db.Uuid
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  appointment     appointment[]
  organization    organization  @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description        String?              @db.VarChar(255)
  address            String?              @db.VarChar(255)
  city               String?              @db.VarChar(255)
  state              String?              @db.VarChar(255)
  zip_code           String?              @db.VarChar(255)
  country            String?              @db.VarChar(255)
  name               String               @db.VarChar(255)
  created_at         DateTime             @default(now()) @db.Timestamp(6)
  updated_at         DateTime             @default(now()) @db.Timestamp(6)
  user_id            String               @db.Uuid
  tenant_id          String               @db.VarChar(255)
  appointment        appointment[]
  insurance_provider insurance_provider[]
  medical_staff      medical_staff[]
  user               user                 @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email              String               @unique @db.VarChar(255)
  firstName          String?              @db.VarChar(255)
  lastName           String?              @db.VarChar(255)
  roq_user_id        String               @db.VarChar(255)
  tenant_id          String               @db.VarChar(255)
  created_at         DateTime             @default(now()) @db.Timestamp(6)
  updated_at         DateTime             @default(now()) @db.Timestamp(6)
  guest              guest[]
  insurance_provider insurance_provider[]
  medical_staff      medical_staff[]
  organization       organization[]
}
